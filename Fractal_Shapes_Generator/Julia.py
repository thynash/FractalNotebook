import numpy as np
import matplotlib.pyplot as plt
import os
output_dir="../Fractal_Shapes"
def julia(c, max_iter):
    def func(z):
        for i in range(max_iter):
            z = z*z + c
            if abs(z) > 2:
                return i
        return max_iter
    return func

def generate_julia_set(c, xmin, xmax, ymin, ymax, width, height, max_iter=256):
    r1 = np.linspace(xmin, xmax, width)
    r2 = np.linspace(ymin, ymax, height)
    julia_image = np.zeros((height, width))
    func = julia(c, max_iter)
    for i in range(width):
        for j in range(height):
            z = complex(r1[i], r2[j])
            julia_image[j, i] = func(z)
    return julia_image

julia_description="""
    ### Julia Set

    The **Julia set** is a family of intricate fractals closely related to the Mandelbrot set. Each Julia set is generated by repeatedly applying the formula _zₙ₊₁ = zₙ² + c_, where _c_ is a fixed complex number, and _z₀_ is a starting point in the complex plane.

    Each unique value of _c_ produces a different Julia set, revealing a fascinating variety of shapes—ranging from connected webs to dust-like scattered patterns. Julia sets are celebrated for their mathematical beauty, infinite complexity, and self-similarity.

    Use the sliders below to change the real and imaginary parts of _c_, as well as the number of iterations, to explore the rich world of Julia fractals!
    """

